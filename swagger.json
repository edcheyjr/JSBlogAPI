{
  "openapi": "3.1.0",
  "info": {
    "title": "blog api",
    "description": "blog api based on node js",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:5000/api/v1"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "root of the api",
        "description": "blog api build on nodejs express  mongoose running mongodb",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Login a user",
        "description": "Authenticate a user and return a JWT token.",
        "operationId": "loginUser",
        "requestBody": {
          "description": "Login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/signup": {
      "post": {
        "tags": ["auth"],
        "summary": "Signup a new user",
        "description": "Create a new user account.",
        "operationId": "signupUser",
        "requestBody": {
          "description": "New user details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signup successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Email already registered"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "tags": ["auth"],
        "summary": "Logout a user",
        "description": "Logout the current user.",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jwt-test": {
      "get": {
        "tags": ["auth"],
        "summary": "Test JWT",
        "description": "Test the validity of a JWT token.",
        "operationId": "jwtTest",
        "responses": {
          "200": {
            "description": "JWT is valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": ["users"],
        "summary": "Create a new user",
        "description": "Create a new user in the system. This endpoint requires admin privileges.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": ["users"],
        "summary": "Retrieve all users",
        "description": "Retrieve all users in the system. This endpoint requires admin privileges.",
        "operationId": "findAllUsers",
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["users"],
        "summary": "Retrieve a single user",
        "description": "Retrieve a single user by user ID. This endpoint requires admin privileges.",
        "operationId": "findOneUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update a user",
        "description": "Update an existing user by user ID. This endpoint requires admin privileges.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User object with updated data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete a user",
        "description": "Delete a user by user ID. This endpoint requires admin privileges.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/blogs": {
      "post": {
        "tags": ["blogs"],
        "summary": "Create a new blog",
        "description": "Create a new blog in the system. This endpoint requires authentication.",
        "operationId": "createBlog",
        "requestBody": {
          "description": "Blog object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blog"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Blog created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blog"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": ["blogs"],
        "summary": "Retrieve all blogs",
        "description": "Retrieve all blogs in the system. This endpoint requires authentication.",
        "operationId": "findAllBlogs",
        "responses": {
          "200": {
            "description": "A list of blogs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Blog"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/blogs/approved": {
      "get": {
        "tags": ["blogs"],
        "summary": "Retrieve all approved blogs",
        "description": "Retrieve all approved blogs in the system. This endpoint requires authentication.",
        "operationId": "findAllApprovedBlogs",
        "responses": {
          "200": {
            "description": "A list of approved blogs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Blog"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/blogs/user/{userId}": {
      "get": {
        "tags": ["blogs"],
        "summary": "Retrieve all blogs for a specific user",
        "description": "Retrieve all blogs created by a specific user. This endpoint requires authentication.",
        "operationId": "findAllBlogsForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to retrieve blogs for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of blogs for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Blog"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/blogs/{blogId}": {
      "get": {
        "tags": ["blogs"],
        "summary": "Retrieve a single blog",
        "description": "Retrieve a single blog by blog ID. This endpoint requires authentication.",
        "operationId": "findOneBlog",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "ID of the blog to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blog"
                }
              }
            }
          },
          "404": {
            "description": "Blog not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": ["blogs"],
        "summary": "Update a blog",
        "description": "Update an existing blog by blog ID. This endpoint requires authentication.",
        "operationId": "updateBlog",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "ID of the blog to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Blog object with updated data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blog"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Blog updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blog"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Blog not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["blogs"],
        "summary": "Delete a blog",
        "description": "Delete a blog by blog ID. This endpoint requires authentication.",
        "operationId": "deleteBlog",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "ID of the blog to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog deleted successfully"
          },
          "404": {
            "description": "Blog not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/blogs/{blogId}/approve": {
      "patch": {
        "tags": ["blogs"],
        "summary": "Approve a blog",
        "description": "Approve a blog by blog ID. This endpoint requires admin privileges.",
        "operationId": "approveBlog",
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "description": "ID of the blog to approve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blog"
                }
              }
            }
          },
          "404": {
            "description": "Blog not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "required": ["firstname", "lastname", "email", "password", "role"],
        "properties": {
          "id": {
            "type": "string",
            "example": "60c72b2f9b1d8e30d8d60b94"
          },
          "firstname": {
            "type": "string",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "example": "password123"
          },
          "role": {
            "type": "number",
            "example": 0,
            "default": 0
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-17T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-17T00:00:00Z"
          }
        }
      },
      "Blog": {
        "type": "object",
        "required": ["description"],
        "properties": {
          "id": {
            "type": "string",
            "example": "60c72b2f9b1d8e30d8d60b95"
          },
          "title": {
            "type": "string",
            "example": "My First Blog"
          },
          "description": {
            "type": "string",
            "example": "This is a description of my first blog."
          },
          "body": {
            "type": "string",
            "example": "This is the content of my first blog."
          },
          "status": {
            "type": "boolean",
            "example": true,
            "default": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-17T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-17T00:00:00Z"
          },
          "owner": {
            "type": "string",
            "example": "60c72b2f9b1d8e30d8d60b94"
          }
        }
      }
    }
  }
}
